# .github/workflows/build.yml
name: Build Radiomics Pipeline Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy
        pip install nuitka
        
    - name: Install project dependencies
      run: pip install -r requirements.txt
      # No shell needed here, it's a simple command

    - name: Create Streamlit config for packaging
      shell: bash  # Force bash for this multi-line script
      run: |
        mkdir .streamlit
        echo -e "[server]\nheadless = true\nport = 8501\nenableCORS = false" > .streamlit/config.toml

    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash # This is default, but explicit is fine
      run: |
        nuitka --onefile --output-filename=radiomics-pipeline-linux \
          --include-data-dir=.streamlit=.streamlit \
          --include-data-files=*.py=./ \
          --include-data-files=*.md=./ \
          --enable-plugin=anti-bloat \
          --no-anti-bloat=streamlit \
          --enable-plugin=tk-inter \
          app.py
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash  # <-- THE CRITICAL CHANGE FOR WINDOWS
      run: |
        nuitka --onefile --output-filename=radiomics-pipeline-windows.exe \
          --include-data-dir=.streamlit=.streamlit \
          --include-data-files=*.py=./ \
          --include-data-files=*.md=./ \
          --enable-plugin=anti-bloat \
          --no-anti-bloat=streamlit \
          --enable-plugin=tk-inter \
          --windows-console-mode=attach \
          app.py
    
    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash # This is default, but explicit is fine
      run: |
        nuitka --onefile --output-filename=radiomics-pipeline-macos \
          --include-data-dir=.streamlit=.streamlit \
          --include-data-files=*.py=./ \
          --include-data-files=*.md=./ \
          --enable-plugin=anti-bloat \
          --no-anti-bloat=streamlit \
          --enable-plugin=tk-inter \
          app.py
    
    # ... (rest of the file is unchanged) ...
# ... (rest of the file is the same) ...
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: radiomics-pipeline-linux
        path: radiomics-pipeline-linux
        retention-days: 30
    
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: radiomics-pipeline-windows
        path: radiomics-pipeline-windows.exe
        retention-days: 30
    
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: radiomics-pipeline-macos
        path: radiomics-pipeline-macos
        retention-days: 30
